// Import các thư viện cần thiết
const fs = require('fs');
const { ethers, JsonRpcProvider } = require('ethers');
const readline = require('readline');
const chalk = require('chalk');

// Cấu hình mạng Tea Sepolia
const networkConfig = {
    name: 'Tea Sepolia',
    chainId: 10218,
    rpcUrl: 'https://tea-sepolia.g.alchemy.com/public',
    currencySymbol: 'TEA',
    explorerUrl: 'https://sepolia.tea.xyz'
};

// Khởi tạo provider
const provider = new JsonRpcProvider(networkConfig.rpcUrl);

// Hàm đọc file với xử lý lỗi
const readFileLines = async (filename) => {
    try {
        const fileStream = fs.createReadStream(filename);
        const lines = [];
        const rl = readline.createInterface({
            input: fileStream,
            crlfDelay: Infinity
        });

        for await (const line of rl) {
            lines.push(line.trim());
        }
        return lines;
    } catch (error) {
        throw new Error(`Không thể đọc file ${filename}: ${error.message}`);
    }
};

// Hàm tạo số lượng token ngẫu nhiên
const getRandomAmount = () => {
    const min = 0.00001;
    const max = 0.001;
    const random = Math.random() * (max - min) + min;
    return ethers.parseEther(random.toFixed(6));
};

// Hàm tạo delay ngẫu nhiên từ 2 đến 10 giây
const getRandomDelay = () => {
    const min = 2; // giây
    const max = 10; // giây
    return Math.floor(Math.random() * (max - min + 1) + min) * 1000; // Chuyển sang milliseconds
};

// Hàm kiểm tra số dư TEA
const checkBalance = async (privateKey) => {
    try {
        const wallet = new ethers.Wallet(privateKey, provider);
        const balance = await provider.getBalance(wallet.address);
        return {
            address: wallet.address,
            balance: ethers.formatEther(balance)
        };
    } catch (error) {
        throw new Error(`Lỗi khi kiểm tra số dư: ${error.message}`);
    }
};

// Hàm gửi token TEA
const sendToken = async (privateKey, recipientAddress) => {
    try {
        const wallet = new ethers.Wallet(privateKey, provider);
        const amount = getRandomAmount();

        // Kiểm tra số dư
        const balance = await provider.getBalance(wallet.address);
        if (balance < amount) {
            console.log(chalk.red(`Số dư không đủ trong ví ${wallet.address}: ${ethers.formatEther(balance)} TEA`));
            return false;
        }

        console.log(chalk.yellow(`Đang thực hiện giao dịch từ ví ${wallet.address} tới ${recipientAddress}...`));
        const feeData = await provider.getFeeData();
        const gasPrice = feeData.gasPrice;

        const tx = {
            to: recipientAddress,
            value: amount,
            gasLimit: 21000,
            gasPrice: gasPrice
        };

        const transaction = await wallet.sendTransaction(tx);
        console.log(chalk.green(`Gửi ${ethers.formatEther(amount)} TEA từ ${wallet.address} tới ${recipientAddress}`));
        console.log(chalk.cyan(`Tx Hash: ${transaction.hash}`));
        console.log(chalk.cyan(`Xem giao dịch: ${networkConfig.explorerUrl}/tx/${transaction.hash}`));
        
        await transaction.wait();
        console.log(chalk.green('Giao dịch đã được xác nhận'));
        return true;
    } catch (error) {
        console.error(chalk.red(`Lỗi khi gửi token tới ${recipientAddress}: ${error.message}`));
        return false;
    }
};

// Hàm chính
const main = async () => {
    try {
        // Đọc dữ liệu từ file
        const privateKeys = await readFileLines('privatekey.txt');
        const addresses = await readFileLines('visend.txt');

        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        // Hiển thị danh sách ví và số dư
        console.log(chalk.blue.bold('Danh sách ví có sẵn:'));
        const walletsInfo = [];
        for (let i = 0; i < privateKeys.length; i++) {
            const { address, balance } = await checkBalance(privateKeys[i]);
            walletsInfo.push({ privateKey: privateKeys[i], address, txCount: 0 });
            console.log(chalk.blue(`${i + 1}. Ví ${i + 1} - Địa chỉ: ${address} - Số dư: ${balance} TEA`));
        }

        // Chọn ví gửi
        const walletChoice = await new Promise((resolve) => {
            rl.question(chalk.magenta('Chọn ví gửi (1, 2, 3,... hoặc "all" để dùng tất cả ví): '), resolve);
        });

        let selectedWallets = [];
        if (walletChoice.toLowerCase() === 'all') {
            selectedWallets = walletsInfo; // Dùng tất cả ví
        } else {
            const walletIndex = parseInt(walletChoice) - 1;
            if (walletIndex >= 0 && walletIndex < walletsInfo.length) {
                selectedWallets = [walletsInfo[walletIndex]]; // Dùng ví được chọn
            } else {
                console.log(chalk.red('Lựa chọn ví không hợp lệ!'));
                rl.close();
                return;
            }
        }

        // Nhập số lượng giao dịch cho mỗi địa chỉ từ mỗi ví
        const txPerAddress = await new Promise((resolve) => {
            rl.question(chalk.magenta('Nhập số lượng giao dịch cho mỗi địa chỉ từ mỗi ví: '), (answer) => {
                resolve(parseInt(answer) || 1);
            });
        });

        // Nhập số vòng lặp
        const loopCount = await new Promise((resolve) => {
            rl.question(chalk.magenta('Nhập số lần lặp lại toàn bộ quá trình (mặc định 1 nếu để trống): '), (answer) => {
                resolve(parseInt(answer) || 1);
            });
        });

        // Thực hiện gửi token
        console.log(chalk.blue.bold(`\nBắt đầu gửi TEA tới ${addresses.length} địa chỉ từ ${selectedWallets.length} ví:`));
        for (let loop = 1; loop <= loopCount; loop++) {
            console.log(chalk.blue.bold(`\nVòng lặp ${loop}/${loopCount}:`));
            
            for (let i = 0; i < addresses.length; i++) {
                const recipientAddress = addresses[i];
                if (!ethers.isAddress(recipientAddress)) {
                    console.log(chalk.red(`Địa chỉ ${recipientAddress} không hợp lệ, bỏ qua...`));
                    continue;
                }

                console.log(chalk.blue(`\nXử lý địa chỉ ${recipientAddress} (${i + 1}/${addresses.length}):`));
                for (let j = 0; j < selectedWallets.length; j++) {
                    const wallet = selectedWallets[j];
                    
                    for (let tx = 1; tx <= txPerAddress; tx++) {
                        const totalTxLimit = txPerAddress * addresses.length * loopCount;
                        if (wallet.txCount >= totalTxLimit) {
                            console.log(chalk.yellow(`Ví ${wallet.address} đã đạt giới hạn giao dịch`));
                            continue;
                        }

                        const success = await sendToken(wallet.privateKey, recipientAddress);
                        if (success) {
                            wallet.txCount++;
                            console.log(chalk.green(`Ví ${wallet.address} - Giao dịch ${wallet.txCount}/${totalTxLimit} tới ${recipientAddress}`));
                        } else {
                            console.log(chalk.yellow(`Bỏ qua giao dịch từ ${wallet.address} tới ${recipientAddress} do lỗi hoặc số dư không đủ`));
                        }

                        const delay = getRandomDelay();
                        console.log(chalk.gray(`Đợi ${delay / 1000} giây trước giao dịch tiếp theo...`));
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }
                }
            }
        }

        console.log(chalk.green.bold('\nĐã hoàn tất tất cả các vòng lặp gửi TEA!'));
        rl.close();
    } catch (error) {
        console.error(chalk.red('Lỗi:', error.message));
    }
};

// Khởi chạy chương trình
main();